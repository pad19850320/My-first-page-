import fitz
from typing import Tuple
import os
#import tesseract
#import pytesseract
#import matplotlib.pyplot as plt
from PIL import Image,ImageFilter,ImageDraw
#https://www.thepythoncode.com/article/convert-pdf-files-to-images-in-python
# https://github.com/sirfz/tesserocr
def pdg_to_str(str_path,namberpage):
    # читать изображение с помощью Image
    img = Image.open(str_path)
    #string = pytesseract.image_to_string(image)
    # печатаем
    str_split=str_path.split('.')
    print(str_split)
    img.filter(ImageFilter.BLUR)
    #img.save("Out"+str_split[1]);
    img.save("Out"+str_path);
    width=img.size[0]
    height=img.size[1]
   
    print(height, width)
    draw = ImageDraw.Draw(img)
    pix=img.load()
    for i in range(width):
        for j in range(height):
            a,b,c=pix[i,j]
            S=(a+b+c)//3
            draw.point((i,j),(255-S,255-S,255-S))
            #pix[i,j][0], pix[i,j][1], pix[i,j][2]=int(255-S)
    img.save("black"+str(str_split[0])+'.png');
    #CONTOUR Фильт
    print("Out"+str_split[0]+'.png') 
    print('Фильтр успешно применен !')
    return True

def convert_pdf2img(input_file: str, pages: Tuple = None):
    """Converts pdf to image and generates a file by page"""
    # Open the document
    pdfIn = fitz.open(input_file)
    output_files = []
    rotate =270 # int(0)
    # Iterate throughout the pages
    for pg in range(pdfIn.pageCount):
        if str(pages) != str(None):
            if str(pg) not in str(pages):
                continue
        # Select a page
        page = pdfIn[pg]
        print("Флаг поворот: ",rotate)
        # PDF Page is converted into a whole picture 1056*816 and then for each picture a screenshot is taken.
        # zoom = 1.33333333 -----> Image size = 1056*816
        # zoom = 2 ---> 2 * Default Resolution (text is clear, image text is hard to read)    = filesize small / Image size = 1584*1224
        # zoom = 4 ---> 4 * Default Resolution (text is clear, image text is barely readable) = filesize large
        # zoom = 8 ---> 8 * Default Resolution (text is clear, image text is readable) = filesize large
        zoom_x = 2
        zoom_y = 2
        # The zoom factor is equal to 2 in order to make text clear
        # Pre-rotate is to rotate if needed.
        mat = fitz.Matrix(zoom_x, zoom_y).preRotate(rotate)
        pix = page.getPixmap(matrix=mat, alpha=False)
        #output_file = f"{os.path.splitext(os.path.basename(input_file))[0]}_page{pg+1}.png"
        output_file = "outputdir/page"+str(pg+1)+".png"
        pix.writePNG(output_file)
        output_files.append(output_file)
        print(output_file)
         #pdg_to_str(output_file,pg)
        # 1111
    pdfIn.close()
    summary = {
        "File": input_file, "Pages": str(pages), "Output File(s)": str(output_files)
    }
    # Printing Summary
    print("## Summary ########################################################")
    print("\n".join("{}:{}".format(i, j) for i, j in summary.items()))
    print("###################################################################")
    return output_files

if __name__ == "__main__":
 input_file ='doc01.pdf'
 #print(tesserocr.tesseract_version())
 convert_pdf2img(input_file)
 #pdg_to_str('brain.jpg',1)
